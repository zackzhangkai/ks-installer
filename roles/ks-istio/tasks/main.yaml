---
- name: servicemesh | Getting istio installation files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/servicemesh"
  loop:
    - "istio"
    - "kiali"
    - "jaeger"

- name: servicemesh | Unarchive istio files
  shell: >
    tar -zxf {{ kubesphere_dir }}/servicemesh/istio/istio-1.6.10-linux-amd64.tar.gz -C {{ kubesphere_dir }}/servicemesh/istio/

# label istio-system with istio-injection=disabled to avoid sidecarInjector mutatingwebhookconfigurations block pod creation
- name: servicemesh | disable istio-injection
  shell: >
    {{ bin_dir }}/kubectl label ns {{ item }} istio-injection=disabled --overwrite
  loop:
    - istio-system
    - kube-system
    - kubesphere-system
    - kubesphere-devops-system
  ignore_errors: True

- name: servicemesh | add rules for ks-installer
  shell: >
    {{ bin_dir }}/kubectl apply -f <(cat <({{ bin_dir }}/kubectl get clusterrole ks-installer -o yaml) {{ kubesphere_dir }}/servicemesh/istio/clusterroles.yaml)

- name: servicemesh | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/servicemesh/{{ item.path }}/{{ item.file }}"
  with_items:
    - { path: istio, file: istio-profile.yaml }
    - { path: jaeger, file: custom-values-jaeger.yaml }
    - { path: jaeger, file: jaeger-production.yaml }
    - { path: kiali, file: custom-values-kiali.yaml }

- name: servicemesh | Check istiod
  shell: >
    {{ bin_dir }}/kubectl -n istio-system get pods -lapp=istiod
  register: istiod_check
  failed_when: false

- name: servicemesh | Check istio old version
  shell: helm -n istio-system list | grep "istio-1.4.8"
  register: istio_old_version_check
  failed_when: false

- import_tasks: upgrade-pre.yaml
  when:
    - istiod_check.stdout.find("istiod") == -1
    - istio_old_version_check.stdout.find('deployed') != -1

- name: servicemesh | Install istiod-1.6.10
  shell: >
    {{ kubesphere_dir }}/servicemesh/istio/istio-1.6.10/bin/istioctl install -f {{ kubesphere_dir }}/servicemesh/istio/istio-profile.yaml --set revision=1-6-10
  register: istio_result
  failed_when: false
  retries: 3
  until: "'errors occurred during operation' not in istio_result.stderr"
  when: istiod_check.stdout.find("istiod") == -1

# when install istiod-1.6.10 failed, disable injector
- name: servicemesh | Disable istiod-1.6.10 injector
  ignore_errors: true
  shell: >
    {{ bin_dir }}/kubectl delete mutatingwebhookconfigurations istio-sidecar-injector-1-6-10
  when:
    - (istiod_check.stdout.find("istiod") == -1) and ('errors occurred during operation' in istio_result.stderr)

# when install istiod failed, delete deploy istiod
- name: servicemesh | Delete istiod deployment
  ignore_errors: true
  shell: >
    {{ bin_dir }}/kubectl -n istio-system delete deploy istiod-1-6-10
  when:
    - (istiod_check.stdout.find("istiod") == -1) and ('errors occurred during operation' in istio_result.stderr)

- import_tasks: jaeger-install.yaml

- import_tasks: kiali-install.yaml

# new prometheus config is compatible for istio-1.4.8 and istio-1.6.10
- name: servicemesh | Delete prometheus config
  shell: >
    {{ bin_dir }}/kubectl -n kubesphere-monitoring-system delete secret additional-scrape-configs
  ignore_errors: true

- name: servicemesh | Create prometheus config
  shell: >
    {{ bin_dir }}/kubectl -n kubesphere-monitoring-system create secret generic additional-scrape-configs --from-file={{ kubesphere_dir }}/servicemesh/istio/prometheus-additional.yaml

- name: servicemesh | Show istiod installation logs
  debug:
    var: istio_result

- name: servicemesh | set servicemesh status enabled
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"servicemesh": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
  when:
    - (istiod_check.stdout.find("istiod") == -1 and 'errors occurred during operation' not in istio_result.stderr) or (istiod_check.stdout.find("istiod") != -1)

- name: servicemesh | set servicemesh status failed
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"servicemesh": {"status": "failed", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
  when:
    - istiod_check.stdout.find("istiod") == -1 and 'errors occurred during operation' in istio_result.stderr