name: e2e-TEST

on:
  push:
    branches: [master, release-3.1]
  pull_request:
    branches: [master, release-3.1]

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: ks-installer
  IMAGE_REPO: kubespheredev
  IMAGE_VERSION: latest
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}

jobs:
  Test-on-k8s-v-1-19-7:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    steps:
    - uses: actions/checkout@v2

#    - name: Clean up
#      run: kind delete cluster --name chart-testing && docker image prune -f
#
#    - name: Build image
#      run: docker build . --file Dockerfile --tag ks-installer
#
#    - name: Create kind cluster
#      uses: helm/kind-action@v1.1.0
#      with:
#        config: .github/workflows/kind/kind.yaml
#
#    - name: Load image to kind
#      run: kind load docker-image ks-installer --name chart-testing
#
#    - name: Deploy KubeSphere to Kind
#      run: |
#        sed -i 's/image: .*/image: ks-installer/g' deploy/kubesphere-installer.yaml
#        sed -i 's/imagePullPolicy: .*/imagePullPolicy: IfNotPresent/g' deploy/kubesphere-installer.yaml
#        sed -i 's/jenkinsMemoryReq: .*/jenkinsMemoryReq: 200Mi/g' deploy/cluster-configuration.yaml
#        sed -i 's/# elasticsearchDataReplicas: .*/elasticsearchDataReplicas: 1/g' deploy/cluster-configuration.yaml
#        kubectl apply -f deploy/kubesphere-installer.yaml
#        kubectl apply -f deploy/cluster-configuration.yaml
#        bash scripts/check_cluster_status.sh
#
#    - name: Test plugin
#      run: |
#        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"servicemesh":{"enabled":true},"devops":{"enabled":true},"alerting":{"enabled":true},"auditing":{"enabled":true},"console":{"enableMultiLogin":true},"events":{"enabled":true},"logging":{"enabled":true},"metrics_server":{"enabled":true},"network":{"networkpolicy":{"enabled":true}},"openpitrix":{"store":{"enabled":true}}}}'
#        bash scripts/check_cluster_status.sh

    - name: slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      if: ${{ failure() }}

  push-image-to-dockerhub:
    runs-on: ubuntu-latest
    needs: [Test-on-k8s-v-1-19-7]
    if: github.event.pull_request.merged == 'true'

    steps:
      - uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/heads/}

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        run: |
          IMAGE=$IMAGE_REPO/$IMAGE_NAME:$([ "$GITHUB_REF" = refs/heads/master ] && echo "latest" || echo "${{ steps.get_version.outputs.VERSION }}")
          docker build . --file Dockerfile --tag $IMAGE
          echo $IMAGE
          docker push $IMAGE
          echo "Push $IMAGE success!"
      - name: slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        if: ${{ failure() }}

