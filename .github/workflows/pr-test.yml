name: PR-Test

on:
  push:
    branches: [master, express]
  pull_request:
    branches: [master]

jobs:
  pr-test:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}
    steps:
    - uses: actions/checkout@v2

    - name: Build image
      run: docker build . --file Dockerfile --tag ks-installer

    - name: Create kind cluster
      uses: helm/kind-action@v1.0.0-rc.1

    - name: Load image to kind
      run: kind load docker-image ks-installer --name chart-testing

    - name: Deploy KubeSphere to Kind
      run: |
        kubectl apply -f deploy/kubesphere-installer.yaml
        kubectl apply -f deploy/cluster-configuration.yaml
        kubectl -n kubesphere-system get deploy ks-installer -oyaml | sed "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" | kubectl replace -f -
        kubectl -n kubesphere-system set image deploy/ks-installer installer=ks-installer
        kubectl -n kubesphere-system get cc ks-installer -o yaml | sed "s/false/true/g" | kubectl replace -n kubesphere-system cc -f -
        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"etcd":{"monitoring":false}}}'
        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"etcd":{"tlsEnable":false}}}'
        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"kubeedge":{"enabled":false}}}'
        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"servicemesh":{"enabled":false}}}'

    - name: Check Cluster Status
      run: bash scripts/check_cluster_status.sh
      timeout-minutes: 90

    - name: Enable servicemesh Plugin
      run: |
        kubectl -n kubesphere-system patch cc ks-installer --type merge --patch '{"spec":{"servicemesh":{"enabled":true}}}'
        for i in {1..900};do
          set +e
          kubectl -n istio-system get deploy | grep istiod
          if [[ $? -ne 0 ]];then
            sleep 1
            echo "wait $i s..."
            continue
          fi
          set -e
          kubectl -n istio-system get deploy istiod-1-6-10 -oyaml | sed 's/cpu: 500m/cpu: 5m/g' | sed 's/memory: 2Gi/memory: 100Mi/g' | kubectl replace -f - && \
          break
        done

    - name: Check Cluster Status
      run: bash scripts/check_cluster_status.sh
      timeout-minutes: 90

    - name: slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      if: ${{ failure() }}

